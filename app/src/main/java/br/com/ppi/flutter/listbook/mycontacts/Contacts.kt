package br.com.ppi.flutter.listbook.mycontacts

// Para testar um exemplo especÃ­fico, descomente sua funÃ§Ã£o main()
// e comente as outras funÃ§Ãµes main().
// Lembre-se tambÃ©m de descomentar quaisquer funÃ§Ãµes auxiliares que o exemplo principal utiliza.
// --- ðŸ”¹ Slide 6 a 10 â€“ FunÃ§Ã£o main() ---
/*
fun main() {
    val isUnit = println("Nosso primeiro exemplo usando a funÃ§Ã£o main()")
    println(isUnit)
}
*/
// --- ðŸ”¹ Slide 12 â€“ ExpressÃµes em Kotlin ---
/*
fun main() {
    val contacts = listOf("JoÃ£ozinho", "Paulinho", "Mariazinha")

    val status = if(contacts.isEmpty()) {
        "Agenda vazia ${contacts}"
    } else {
        "VocÃª tem ${contacts.size} contatos"
    }

    println(status)
}
*/
// --- ðŸ”¹ Slide 12 (Iterando nomes da lista) ---
/*
fun main() {
    val contacts = listOf("JoÃ£ozinho", "Paulinho", "Mariazinha")

    if (contacts.isEmpty()) {
        println("Agenda vazia: $contacts")
    } else {
        println("VocÃª tem ${contacts.size} contatos:")
        contacts.forEach { contact ->
            println("- $contact")
        }
    }
}
*/
// --- ðŸ”¹ Slide 14 â€“ Retorno `Unit` ---
/*
fun main() {
    val isUnit = println() // println() sem argumentos imprime uma nova linha
    println(isUnit)
}
*/
// --- ðŸ”¹ Slide 17 â€“ ParÃ¢metros padrÃ£o ---
/*
fun main() {
    val contactsList = listOf("JoÃ£ozinho", "Paulinho", "Mariazinha")
    showContactsWithDefaults(contacts = contactsList)
    showContactsWithDefaults() // Chamando com todos os padrÃµes
    showContactsWithDefaults(title = "Agenda Especial") // Mudando apenas o tÃ­tulo
}

private fun showContactsWithDefaults(contacts: List<String> = emptyList(), title: String = "Minha Agenda") {
    println("=== $title ===")

    if(contacts.isEmpty()) {
        println("Nenhum contato encontrado.")
    } else {
        println("VocÃª tem ${contacts.size} contatos:")
        for (contact in contacts) {
            println("- $contact")
        }
    }
}
*/
// --- ðŸ”¹ Slide 18 â€“ ParÃ¢metros obrigatÃ³rios ---
/*
fun main() {
    val contactList = listOf("JoÃ£ozinho", "Paulinho", "Mariazinha", "Chiquinha")
    showRequiredContacts(contactList, "Contatos pessoais")
}

fun showRequiredContacts(contacts: List<String>, title: String) {
    println("=== $title ===")

    if(contacts.isEmpty()) {
        println("Nenhum contato encontrado.")
    } else {
        println("VocÃª tem ${contacts.size} contatos:")
        for (contact in contacts) {
            println("- $contact")
        }
    }
}
*/
// --- ðŸ”¹ Slide 19 â€“ ObrigatÃ³rios + Opcionais ---
/*
fun main() {
    val contatos = listOf("JoÃ£ozinho", "Mariazinha", "Paulin", "PedrÃ£o")
    showFilteredContacts(contatos, 'M')
    showFilteredContacts(contatos) // Sem filtro
}

fun showFilteredContacts(
    contacts: List<String>,
    filter: Char? = null // filter Ã© opcional
) {
    val filtered = filter?.let { charToFilter -> // Renomeado 'word' para 'charToFilter' para clareza
        contacts.filter { it.startsWith(charToFilter, ignoreCase = true) }
    } ?: contacts

    if (filtered.isEmpty()) {
        println("Nenhum contato encontrado.")
    } else {
        println("Contatos encontrados:")
        filtered.forEach { println("- $it") }
    }
}
*/
// --- ðŸ”¹ Slide 20 â€“ Argumentos nomeados ---
/*
fun main() {
    val contatos = listOf("JoÃ£ozin", "Mariazinha", "Juninho", "Kikinho")

    showContactsWithNamedParameters(
        showCount = false,
        contacts = contatos,
        title = "Contatos Sem Contagem"
    )

    showContactsWithNamedParameters(contacts = contatos) // Usando padrÃµes para title e showCount
}

fun showContactsWithNamedParameters(
    contacts: List<String>,
    title: String = "Minha Agenda",
    showCount: Boolean = true
) {
    println("=== $title ===")

    if (showCount) {
        println("VocÃª tem ${contacts.size} contatos.")
    }

    if (contacts.isEmpty()) {
        println("Lista vazia.")
    } else {
        // Corrigido para iterar sobre os contatos, nÃ£o apenas imprimir o Ã­ndice
        for ((index, contato) in contacts.withIndex()) {
            println("${index + 1} - $contato")
        }
    }
}
*/
// --- ðŸ”¹ Slide 22 â€“ FunÃ§Ãµes de expressÃ£o Ãºnica ---
/*
fun main() {
    println(compactReturn(5))
    println(defaultReturn(5))
}

fun defaultReturn(x: Int) : Int {
    return x * 2
}

fun compactReturn(x: Int): Int = x * 2
*/
// --- ðŸ”¹ Slide 24 â€“ Lambdas ---
/*
fun main() {
    val contacts = listOf("Fabin", "Felipin", "CarlÃ£o")
    val showUpperCase = { name : String -> name.uppercase() } // Lambda

    for (contact in contacts) {
        println(showUpperCase(contact))
    }
}
*/
// --- ðŸ”¹ Slide 25 â€“ FunÃ§Ãµes de ordem superior ---
/*
fun main() {
    val contacts = listOf("fabin", "felipin", "carlÃ£o")
    val toUpperCaseLambda = { name: String -> name.uppercase() }
    val toCamelCaseLambda = { name: String -> name.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() } } // Melhoria para CamelCase

    println(processContact(contacts[0], toUpperCaseLambda))
    println(processContact(contacts[0], toCamelCaseLambda))
}

fun processContact(name: String, callback: (String) -> String): String {
    return callback(name)
}
*/
// --- ðŸ”¹ Slide 27 â€“ ReferÃªncia de FunÃ§Ã£o ---
/*
fun main() {
    val contacts = listOf("Fabin", "Felipin", "CarlÃ£o")

    // A funÃ§Ã£o processContacts agora estÃ¡ dentro da main, precisa ser movida para fora ou main nÃ£o pode ser top-level
    // Vamos movÃª-la para fora para ser reutilizÃ¡vel
    // processContactsUsingReference(contacts, ::toUpperCaseDefined)
    // processContactsUsingReference(contacts, ::toCamelCaseDefined)

    // Para executar este, descomente as funÃ§Ãµes abaixo e a chamada acima
    // E comente/renomeie outras 'main'
     println(processContactsUsingReference(contacts, ::toUpperCaseDefined))
     println(processContactsUsingReference(contacts, ::toCamelCaseDefined))
}

// FunÃ§Ãµes auxiliares para o Slide 27
fun toUpperCaseDefined(name: String): String = name.uppercase()
fun toCamelCaseDefined(name: String): String = name.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() } // Melhoria

fun processContactsUsingReference(list: List<String>, callback: (String) -> String): List<String> {
    return list.map { callback(it) }
}
*/
// --- ðŸ”¹ Slide 29 a 31 â€“ Filtros ---
/*
fun main() {
    val contacts = listOf("Ana", "Bruno", "Carlos", "Beatriz", "Amanda", "Caio")

    println("Contatos que comeÃ§am com A:")
    println(filterContactsGeneric(contacts) { it.startsWith("A") })

    println("\nContatos com mais de 5 letras:")
    println(filterContactsGeneric(contacts) { it.length > 5 })

    println("\nContatos que terminam com 'o':")
    println(filterContactsGeneric(contacts) { it.endsWith("o") })
}

fun filterContactsGeneric(list: List<String>, condition: (String) -> Boolean): List<String> {
    return list.filter(condition)
}
*/
// --- ðŸ”¹ Slide 32 e 33 â€“ Filtros Lazy ---
/*
fun main() {
    val contacts = listOf("Ana", "Bruno", "Carlos")

    val lazyFiltered = contacts.asSequence().filter {
        println("Filtrando: $it") // Para ver quando o filtro Ã© aplicado
        it.startsWith("A")
    }

    println("SequÃªncia criada, mas o filtro ainda nÃ£o executou completamente.")
    // O filtro sÃ³ Ã© executado quando uma operaÃ§Ã£o terminal Ã© chamada, como toList() ou forEach.
    println("Resultado: ${lazyFiltered.toList()}") // Agora o filtro executa

    println("\nIterando sobre a sequÃªncia preguiÃ§osa:")
    lazyFiltered.forEach { println("Item encontrado: $it") } // O filtro executa novamente
}
*/
// --- ðŸ”¹ Slide 35 â€“ Map ---
/*
fun main() {
    val contacts = listOf("ana", "bruno", "carlos")

    val upperCaseContacts = contacts.map { it.uppercase() }
    println("Lista transformada: $upperCaseContacts")
}
*/
// --- ðŸ”¹ Slide 36 â€“ Flatten ---
fun main() { // Exemplo para o Slide 36 - Descomentado para teste inicial
    val contactsGroups = listOf(
        listOf("Ana", "Bruno"),
        listOf("Carlos", "Diana"),
        listOf("Eduardo")
    )

    val allContacts = contactsGroups.flatten()
    println("Lista 'achatada': $allContacts")
}